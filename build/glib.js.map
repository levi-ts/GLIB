{"version":3,"file":"glib.js","mappings":";;;;;;;;;;;;;;AAA0C;AACA;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAO;AACnC,2BAA2B,kDAAO;AAClC;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,4BAA4B,kDAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,4BAA4B,kDAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,0BAA0B,kDAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,0BAA0B,kDAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzH0C;AACA;AACO;AACP;AACR;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACO,gCAAgC,2CAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAO;AAClC,uCAAuC,sDAAQ;AAC/C,oBAAoB,6DAAU;AAC9B,QAAQ,kDAAc;AACtB;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sDAAQ;AAC/C;AACA;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvBoF;AAC1C;AACO;AACM;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB,aAAa,EAAE;AAClD;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,oBAAoB,6DAAU;AAC9B,QAAQ,kDAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mEAAa,UAAU,sDAAkB,EAAE,wDAAoB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,mBAAmB;AAClC;AACA;AACA;AACA,2DAA2D,kDAAO,QAAQ,kDAAO;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1JkD;AACR;AACO;AACP;AACF;AACS;AACnB;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAO;AACnC,oBAAoB,6DAAU;AAC9B,QAAQ,kDAAc;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA,kCAAkC,gDAAK;AACvC,4BAA4B,8BAA8B;AAC1D,qCAAqC,0DAAQ;AAC7C,qCAAqC,yDAAQ;AAC7C,iCAAiC,uCAAI;AACrC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClE0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kDAAc;AAC/C,sCAAsC,kDAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HgE;AAC7B;AACQ;AACN;AACY;AACC;AACR;AACU;AACF;AACc;AACR;AACR;AACP;AACA;AACA;AACA;AACF;AAC2J;AAClM;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC,kBAAkB,kCAAkC;AACpD,oBAAoB,yBAAyB;AAC7C,kBAAkB,uBAAuB;AACzC,qBAAqB,yBAAyB;AAC9C,oBAAoB,yBAAyB;AAC7C,iBAAiB,qBAAqB;AACtC,iBAAiB;AACjB,KAAK;AACL;AACO;AACP,cAAc;AACd,eAAe;AACf,iBAAiB;AACjB,eAAe;AACf,kBAAkB;AAClB,iBAAiB;AACjB,cAAc;AACd,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACO,qCAAqC,mDAAM;AAClD;AACA;AACA;AACA,UAAU;AACV;AACO,uCAAuC,mDAAM;;;;;;;;;;;;;;;;;ACrDpD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrB0C;AACmB;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA,8BAA8B,yEAAgB;AAC9C;AACA,4BAA4B,yEAAgB;AAC5C,8BAA8B,yEAAgB;AAC9C;AACA,4BAA4B,yEAAgB;AAC5C,+BAA+B,yEAAgB;AAC/C;AACA,6BAA6B,yEAAgB;AAC7C,+BAA+B,yEAAgB;AAC/C;AACA,6BAA6B,yEAAgB;AAC7C,2BAA2B,yEAAgB;AAC3C,yBAAyB,yEAAgB;AACzC,2BAA2B,yEAAgB;AAC3C,8BAA8B,yEAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,aAAa;AAC5B,iBAAiB,cAAc;AAC/B;AACA;AACA,iCAAiC,kDAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,aAAa;AAC5B,iBAAiB,cAAc;AAC/B;AACA;AACA,iCAAiC,kDAAc;AAC/C;AACA,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5I6D;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA,8BAA8B,yEAAgB;AAC9C;AACA,4BAA4B,yEAAgB;AAC5C,8BAA8B,yEAAgB;AAC9C;AACA,4BAA4B,yEAAgB;AAC5C,+BAA+B,yEAAgB;AAC/C;AACA,6BAA6B,yEAAgB;AAC7C,+BAA+B,yEAAgB;AAC/C;AACA,6BAA6B,yEAAgB;AAC7C,2BAA2B,yEAAgB;AAC3C,yBAAyB,yEAAgB;AACzC,2BAA2B,yEAAgB;AAC3C,8BAA8B,yEAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrB0C;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,aAAa;AAC5B,iBAAiB,cAAc;AAC/B;AACA;AACA,iCAAiC,kDAAc;AAC/C;AACA,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E,cAAc,gDAAgD,IAAI,YAAY;AAC9E;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChD0C;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,aAAa;AAC5B,iBAAiB,cAAc;AAC/B;AACA;AACA,iCAAiC,kDAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA,iCAAiC,kDAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvD2C;AACc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc,eAAe;AAC5C,eAAe,eAAe,cAAc,EAAE;AAC9C;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA,2EAA2E,mDAAM,uEAAuE,iEAAa;AACrK;AACA;AACA,2EAA2E,mDAAM,uEAAuE,iEAAa;AACrK;AACA;AACA,6EAA6E,mDAAM,yEAAyE,iEAAa;AACzK;AACA;AACA,6EAA6E,mDAAM,yEAAyE,iEAAa;AACzK;AACA;AACA,yEAAyE,mDAAM;AAC/E,+EAA+E,mDAAM;AACrF,mFAAmF,mDAAM;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5K6C;AAC7C;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qDAAO,+BAA+B,qDAAO,+BAA+B,qDAAO;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAkB,qDAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,SAAS;AAC5D,eAAe,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,SAAS;AAC5D,eAAe,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,SAAS;AAC7D,eAAe,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,SAAS;AAC7D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzXA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,cAAc,cAAc;AAC3C;AACA,qCAAqC;AACrC;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD,uCAAuC;AACvC;AACA;AACA;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACO;;;;;;;;;;;;;;;ACLP;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,sBAAsB;AACnC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxB4D;AAC5D;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,qBAAqB;AAClC;AACO;AACP,yBAAyB,yEAAmB;AAC5C,2BAA2B,yEAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB,WAAW,qCAAqC;AAChD,aAAa,qCAAqC;AAClD;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;;;;;;SCTA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAI;UACJ;UACA;UACA,IAAI;UACJ;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,CAAC;UACD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,EAAE;UACF;UACA,sGAAsG;UACtG;UACA;UACA;UACA;UACA;UACA;UACA;UACA,GAAG;UACH;UACA;UACA;UACA;UACA;UACA,GAAG;UACH;UACA,EAAE;UACF;UACA;;;;;UChEA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;SENA;SACA;SACA;SACA","sources":["webpack://glib/./src/cameras/Camera.ts","webpack://glib/./src/cameras/PerspectiveCamera.ts","webpack://glib/./src/core/Mesh.ts","webpack://glib/./src/core/Renderer.ts","webpack://glib/./src/core/Scene.ts","webpack://glib/./src/geometries/Geometry.ts","webpack://glib/./src/index.ts","webpack://glib/./src/loaders/JSONLoader.ts","webpack://glib/./src/loaders/Loader.ts","webpack://glib/./src/loaders/ModelLoader.ts","webpack://glib/./src/loaders/TextLoader.ts","webpack://glib/./src/loaders/TextureCubeLoader.ts","webpack://glib/./src/loaders/TextureLoader.ts","webpack://glib/./src/materials/Material.ts","webpack://glib/./src/math/Matrix4.ts","webpack://glib/./src/math/Vector2.ts","webpack://glib/./src/math/Vector3.ts","webpack://glib/./src/math/Vector4.ts","webpack://glib/./src/models/Model.ts","webpack://glib/./src/utils/constants.ts","webpack://glib/./src/utils/createCompileShader.ts","webpack://glib/./src/utils/createProgram.ts","webpack://glib/./src/utils/getPropertyValue.ts","webpack://glib/./src/utils/randomUUID.ts","webpack://glib/./src/utils/utils.ts","webpack://glib/webpack/bootstrap","webpack://glib/webpack/runtime/async module","webpack://glib/webpack/runtime/define property getters","webpack://glib/webpack/runtime/hasOwnProperty shorthand","webpack://glib/webpack/runtime/make namespace object","webpack://glib/webpack/before-startup","webpack://glib/webpack/startup","webpack://glib/webpack/after-startup"],"sourcesContent":["import { Matrix4 } from '../math/Matrix4';\nimport { Vector3 } from '../math/Vector3';\n/**\n * Represents a camera which can be used to render a scene.\n *\n * @export\n * @class Camera\n * @typedef {Camera}\n */\nexport class Camera {\n    /**\n     * The position of the camera in the scene.\n     *\n     * @public\n     * @type {Vector3}\n     */\n    position;\n    /**\n     * The view matrix of the camera.\n     *\n     * @public\n     * @type {Matrix4}\n     */\n    matView;\n    /**\n     * Creates an instance of Camera.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.position = new Vector3();\n        this.matView = new Matrix4();\n    }\n    /**\n     * Sets the view matrix of the camera based on the given parameters.\n     *\n     * @param {Matrix4} out The matrix in which the view matrix should be stored.\n     * @param {Vector3} eye The position of the camera.\n     * @param {Vector3} center The point the camera is looking at.\n     * @param {Vector3} up The up vector of the camera.\n     * @returns {Matrix4} The matrix in which the view matrix has been stored.\n     */\n    lookAt = (out, eye, center, up) => {\n        return out.lookAt(eye, center, up);\n    };\n    /**\n     * Moves the camera forward by the given velocity.\n     *\n     * @param {number} vel The velocity to move the camera forward.\n     * @returns {this}\n     */\n    moveForward = (vel) => {\n        const forward = new Vector3(this.matView[2], this.matView[6], this.matView[10]);\n        const direction = forward.divide(forward.magnitude());\n        this.position[0] += vel * direction[0];\n        this.position[1] += vel * direction[1];\n        this.position[2] += vel * direction[2];\n        return this;\n    };\n    /**\n     * Moves the camera backward by the given velocity.\n     *\n     * @param {number} vel The velocity to move the camera backward.\n     * @returns {this}\n     */\n    moveBackward = (vel) => {\n        const forward = new Vector3(this.matView[2], this.matView[6], this.matView[10]);\n        const direction = forward.divide(forward.magnitude());\n        this.position[0] -= vel * direction[0];\n        this.position[1] -= vel * direction[1];\n        this.position[2] -= vel * direction[2];\n        return this;\n    };\n    /**\n     * Moves the camera to the left by the given velocity.\n     *\n     * @param {number} vel The velocity to move the camera to the left.\n     * @returns {this}\n     */\n    moveLeft = (vel) => {\n        const right = new Vector3(this.matView[0], this.matView[4], this.matView[8]);\n        const direction = right.divide(right.magnitude());\n        this.position[0] -= vel * direction[0];\n        this.position[1] -= vel * direction[1];\n        this.position[2] -= vel * direction[2];\n        return this;\n    };\n    /**\n     * Moves the camera to the right by the given velocity.\n     *\n     * @param {number} vel The velocity to move the camera to the right.\n     * @returns {this}\n     */\n    moveRight = (vel) => {\n        const right = new Vector3(this.matView[0], this.matView[4], this.matView[8]);\n        const direction = right.divide(right.magnitude());\n        this.position[0] += vel * direction[0];\n        this.position[1] += vel * direction[1];\n        this.position[2] += vel * direction[2];\n        return this;\n    };\n    /**\n     * Moves the camera up by the given velocity.\n     *\n     * @param {number} vel The velocity to move the camera up.\n     * @returns {this}\n     */\n    moveUp = (vel) => {\n        this.position[1] += vel;\n        return this;\n    };\n    /**\n     * Moves the camera down by the given velocity.\n     *\n     * @param {number} vel The velocity to move the camera down.\n     * @returns {this}\n     */\n    moveDown = (vel) => {\n        this.position[1] -= vel;\n        return this;\n    };\n}\n","import { globalRegistry } from '../index';\nimport { Matrix4 } from '../math/Matrix4';\nimport { randomUUID } from '../utils/randomUUID';\nimport { toRadian } from '../utils/utils';\nimport { Camera } from './Camera';\n/**\n * A perspective camera.\n *\n * @export\n * @class PerspectiveCamera\n * @typedef {PerspectiveCamera}\n * @extends {Camera}\n */\nexport class PerspectiveCamera extends Camera {\n    fov;\n    aspect;\n    near;\n    far;\n    /**\n     * The projection matrix of the camera.\n     *\n     * @public\n     * @type {Matrix4}\n     */\n    matProj;\n    /**\n     * The uuid of the camera.\n     *\n     * @public\n     * @type {UUID}\n     */\n    uuid;\n    /**\n     * Creates an instance of PerspectiveCamera.\n     *\n     * @constructor\n     * @param {number} fov The vertical field of view of the camera in degrees.\n     * @param {number} aspect The aspect ratio of the camera.\n     * @param {number} near The near clipping plane of the camera.\n     * @param {number} far The far clipping plane of the camera.\n     */\n    constructor(fov, aspect, near, far) {\n        super();\n        this.fov = fov;\n        this.aspect = aspect;\n        this.near = near;\n        this.far = far;\n        this.fov = fov;\n        this.aspect = aspect;\n        this.near = near;\n        this.far = far;\n        this.matProj = new Matrix4().identity();\n        this.perspective(this.matProj, toRadian(this.fov), this.aspect, this.near, this.far);\n        this.uuid = randomUUID();\n        globalRegistry.cameras[this.uuid] = this;\n    }\n    /**\n     * Sets the projection matrix of the camera.\n     *\n     * @param {Matrix4} out The projection matrix.\n     * @param {number} fovy The vertical field of view of the camera in radians.\n     * @param {number} aspect The aspect ratio of the camera.\n     * @param {number} near The near clipping plane of the camera.\n     * @param {number} far The far clipping plane of the camera.\n     * @returns {Matrix4} The projection matrix.\n     */\n    perspective = (out, fovy, aspect, near, far) => {\n        let f = 1.0 / Math.tan(fovy / 2), nf;\n        out[0] = f / aspect;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[5] = f;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[11] = -1;\n        out[12] = 0;\n        out[13] = 0;\n        out[15] = 0;\n        if (far != null && far !== Infinity) {\n            nf = 1 / (near - far);\n            out[10] = (far + near) * nf;\n            out[14] = 2 * far * near * nf;\n        }\n        else {\n            out[10] = -1;\n            out[14] = -2 * near;\n        }\n        return out;\n    };\n    /**\n     * Updates the projection matrix of the camera.\n     */\n    updatePerspective = () => {\n        this.perspective(this.matProj, toRadian(this.fov), this.aspect, this.near, this.far);\n    };\n}\n","/**\n * A mesh is an object which is composed of a geometry and a material.\n *\n * @export\n * @class Mesh\n * @typedef {Mesh}\n */\nexport class Mesh {\n    geometry;\n    material;\n    /**\n     * Creates an instance of Mesh.\n     *\n     * @constructor\n     * @param {Geometry} geometry The geometry of the mesh.\n     * @param {Material} material The material of the mesh.\n     */\n    constructor(geometry, material) {\n        this.geometry = geometry;\n        this.material = material;\n        this.geometry = geometry;\n        this.material = material;\n    }\n}\n","import { fragmentShaderSource, globalRegistry, vertexShaderSource } from '../index';\nimport { Vector3 } from '../math/Vector3';\nimport { randomUUID } from '../utils/randomUUID';\nimport { createProgram } from '../utils/createProgram';\n/**\n * The Renderer class is used to render a scene with a given camera.\n *\n * @export\n * @class Renderer\n * @typedef {Renderer}\n */\nexport class Renderer {\n    parameters;\n    /**\n     * The canvas element that the renderer renders to.\n     *\n     * @public\n     * @type {HTMLCanvasElement}\n     */\n    domElement;\n    /**\n     * The WebGL context that the renderer uses to render.\n     *\n     * @public\n     * @type {GLRenderingContext}\n     */\n    gl;\n    /**\n     * The UUID of the renderer.\n     *\n     * @public\n     * @type {UUID}\n     */\n    uuid;\n    /**\n     * The program info that the renderer uses to render.\n     *\n     * @public\n     * @type {Program}\n     */\n    programInfo;\n    /**\n     * Creates an instance of Renderer.\n     *\n     * @constructor\n     * @param {RendererParameters} [parameters={\\}]\n     */\n    constructor(parameters = {}) {\n        this.parameters = parameters;\n        this.domElement = parameters.canvas ?? document.createElement('canvas');\n        this.gl = parameters.context ?? this.domElement.getContext('webgl2', parameters);\n        this.uuid = randomUUID();\n        globalRegistry.renderers[this.uuid] = this;\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.enable(this.gl.BLEND);\n        this.gl.frontFace(this.gl.CCW);\n        this.gl.cullFace(this.gl.BACK);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        var tempProgram = createProgram(this.gl, vertexShaderSource, fragmentShaderSource);\n        if (!tempProgram)\n            throw new Error('Failed to create the shader program.');\n        this.programInfo = {\n            program: tempProgram,\n            uniforms: {\n                matWorld: this.gl.getUniformLocation(tempProgram, 'matWorld'),\n                matView: this.gl.getUniformLocation(tempProgram, 'matView'),\n                matProj: this.gl.getUniformLocation(tempProgram, 'matProj'),\n                ambientColor: this.gl.getUniformLocation(tempProgram, 'ambientColor'),\n                diffuseColor: this.gl.getUniformLocation(tempProgram, 'diffuseColor'),\n                specularColor: this.gl.getUniformLocation(tempProgram, 'specularColor'),\n                emissiveColor: this.gl.getUniformLocation(tempProgram, 'emissiveColor'),\n                ambientIntensity: this.gl.getUniformLocation(tempProgram, 'ambientIntensity'),\n                diffuseIntensity: this.gl.getUniformLocation(tempProgram, 'diffuseIntensity'),\n                specularIntensity: this.gl.getUniformLocation(tempProgram, 'specularIntensity'),\n                emissiveIntensity: this.gl.getUniformLocation(tempProgram, 'emissiveIntensity'),\n                shininess: this.gl.getUniformLocation(tempProgram, 'shininess'),\n                opacity: this.gl.getUniformLocation(tempProgram, 'opacity'),\n                environmentMap: this.gl.getUniformLocation(tempProgram, 'environmentMap'),\n            },\n        };\n        tempProgram = null;\n        this.gl.useProgram(this.programInfo.program);\n    }\n    /**\n     * Sets the clear color of the renderer.\n     *\n     * @public\n     * @param {number} red\n     * @param {number} green\n     * @param {number} blue\n     * @param {number} alpha\n     */\n    setClearColor(red, green, blue, alpha) {\n        this.gl.clearColor(red, green, blue, alpha);\n    }\n    /**\n     * Sets the size of the renderer.\n     *\n     * @public\n     * @param {number} width\n     * @param {number} height\n     */\n    setSize(width, height) {\n        this.domElement.width = width;\n        this.domElement.height = height;\n        this.gl.viewport(0, 0, width, height);\n    }\n    /**\n     * Renders a scene with a given camera.\n     *\n     * @public\n     * @param {Scene} scene\n     * @param {PerspectiveCamera} camera\n     */\n    render(scene, camera) {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        camera.lookAt(camera.matView, camera.position, new Vector3(), new Vector3(0, 1, 0));\n        this.gl.uniformMatrix4fv(this.programInfo.uniforms.matWorld, false, scene.matWorld);\n        this.gl.uniformMatrix4fv(this.programInfo.uniforms.matView, false, camera.matView);\n        this.gl.uniformMatrix4fv(this.programInfo.uniforms.matProj, false, camera.matProj);\n        for (const mesh of scene.children) {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.geometry.vertexBuffer);\n            const posAttribLoc = this.gl.getAttribLocation(this.programInfo.program, 'pos');\n            this.gl.vertexAttribPointer(posAttribLoc, 3, this.gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n            this.gl.enableVertexAttribArray(posAttribLoc);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.geometry.normalBuffer);\n            const normalAttribLoc = this.gl.getAttribLocation(this.programInfo.program, 'normal');\n            this.gl.vertexAttribPointer(normalAttribLoc, 3, this.gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n            this.gl.enableVertexAttribArray(normalAttribLoc);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.geometry.textureCoordBuffer);\n            const texCoordAttribLoc = this.gl.getAttribLocation(this.programInfo.program, 'texCoord');\n            this.gl.vertexAttribPointer(texCoordAttribLoc, 2, this.gl.FLOAT, false, 2 * Float32Array.BYTES_PER_ELEMENT, 0);\n            this.gl.enableVertexAttribArray(texCoordAttribLoc);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.geometry.indexBuffer);\n            this.gl.uniform3fv(this.programInfo.uniforms.ambientColor, mesh.material.ambientColor);\n            this.gl.uniform3fv(this.programInfo.uniforms.diffuseColor, mesh.material.diffuseColor);\n            this.gl.uniform3fv(this.programInfo.uniforms.specularColor, mesh.material.specularColor);\n            this.gl.uniform3fv(this.programInfo.uniforms.emissiveColor, mesh.material.emissiveColor);\n            this.gl.uniform1f(this.programInfo.uniforms.ambientIntensity, mesh.material.ambientIntensity);\n            this.gl.uniform1f(this.programInfo.uniforms.diffuseIntensity, mesh.material.diffuseIntensity);\n            this.gl.uniform1f(this.programInfo.uniforms.specularIntensity, mesh.material.specularIntensity);\n            this.gl.uniform1f(this.programInfo.uniforms.emissiveIntensity, mesh.material.emissiveIntensity);\n            this.gl.uniform1f(this.programInfo.uniforms.shininess, mesh.material.shininess);\n            this.gl.uniform1f(this.programInfo.uniforms.opacity, mesh.material.opacity);\n            this.gl.activeTexture(this.gl.TEXTURE0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, mesh.material.diffuseMap);\n            this.gl.activeTexture(this.gl.TEXTURE1);\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, mesh.material.environmentMap);\n            this.gl.uniform1i(this.programInfo.uniforms.environmentMap, 1);\n            this.gl.drawElements(this.gl.TRIANGLES, mesh.geometry.indices.length, this.gl.UNSIGNED_SHORT, 0);\n        }\n    }\n}\n","import { Geometry } from '../geometries/Geometry';\nimport { globalRegistry } from '../index';\nimport { Material } from '../materials/Material';\nimport { Matrix4 } from '../math/Matrix4';\nimport { Model } from '../models/Model';\nimport { randomUUID } from '../utils/randomUUID';\nimport { Mesh } from './Mesh';\n/**\n * A scene is an object which contains a list of meshes and a world matrix.\n *\n * @export\n * @class Scene\n * @typedef {Scene}\n */\nexport class Scene {\n    /**\n     * An array of meshes which are part of the scene.\n     *\n     * @public\n     * @type {Mesh[]}\n     */\n    children;\n    /**\n     * The world matrix of the scene.\n     *\n     * @public\n     * @type {Matrix4}\n     */\n    matWorld;\n    /**\n     * The UUID of the scene.\n     *\n     * @public\n     * @type {UUID}\n     */\n    uuid;\n    /**\n     * Creates an instance of Scene.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.children = [];\n        this.matWorld = new Matrix4().identity();\n        this.uuid = randomUUID();\n        globalRegistry.scenes[this.uuid] = this;\n    }\n    /**\n     * Adds a mesh or a model to the scene.\n     *\n     * @public\n     * @param {Mesh|Model} child The mesh or model which should be added to the scene.\n     */\n    add(child) {\n        if (child instanceof Mesh) {\n            this.children.push(child);\n        }\n        else if (child instanceof Model) {\n            for (let i = 0; i < child.data.meshes.length; i++) {\n                const geometry = new Geometry(child.data.meshes[i]);\n                const material = new Material(child.data.materials[child.data.meshes[i].materialindex]);\n                const mesh = new Mesh(geometry, material);\n                this.children.push(mesh);\n            }\n        }\n    }\n}\n","import { globalRegistry } from '../index';\n/**\n * A geometry is a set of vertices, normals, texture coordinates, and indices.\n * It can be used to define the shape and appearance of a mesh.\n *\n * @export\n * @class Geometry\n * @typedef {Geometry}\n */\nexport class Geometry {\n    parameters;\n    /**\n     * The name of the geometry.\n     *\n     * @public\n     * @type {string}\n     */\n    name;\n    /**\n     * The index of the material to use for this geometry.\n     *\n     * @public\n     * @type {number}\n     */\n    materialindex;\n    /**\n     * The vertices of the geometry.\n     *\n     * @public\n     * @type {Float32Array}\n     */\n    vertices;\n    /**\n     * The normals of the geometry.\n     *\n     * @public\n     * @type {Float32Array}\n     */\n    normals;\n    /**\n     * The texture coordinates of the geometry.\n     *\n     * @public\n     * @type {Float32Array}\n     */\n    texturecoords;\n    /**\n     * The indices of the geometry.\n     *\n     * @public\n     * @type {Uint16Array}\n     */\n    indices;\n    /**\n     * The vertex buffer of the geometry.\n     *\n     * @public\n     * @type {(WebGLBuffer | null)}\n     */\n    vertexBuffer = null;\n    /**\n     * The normal buffer of the geometry.\n     *\n     * @public\n     * @type {(WebGLBuffer | null)}\n     */\n    normalBuffer = null;\n    /**\n     * The texture coordinate buffer of the geometry.\n     *\n     * @public\n     * @type {(WebGLBuffer | null)}\n     */\n    textureCoordBuffer = null;\n    /**\n     * The index buffer of the geometry.\n     *\n     * @public\n     * @type {(WebGLBuffer | null)}\n     */\n    indexBuffer = null;\n    /**\n     * Creates an instance of Geometry.\n     *\n     * @constructor\n     * @param {MeshJSON} parameters The parameters to create the geometry with.\n     */\n    constructor(parameters) {\n        this.parameters = parameters;\n        this.name = parameters.name;\n        this.materialindex = parameters.materialindex;\n        if (!Array.isArray(parameters.vertices) || !Array.isArray(parameters.normals) || !Array.isArray(parameters.faces)) {\n            throw new Error('Invalid parameters structure');\n        }\n        this.vertices = new Float32Array(parameters.vertices);\n        this.normals = new Float32Array(parameters.normals);\n        if (parameters.texturecoords && Array.isArray(parameters.texturecoords[0])) {\n            this.texturecoords = new Float32Array(parameters.texturecoords[0]);\n        }\n        else {\n            this.texturecoords = new Float32Array([]);\n        }\n        this.indices = new Uint16Array(parameters.faces.flat());\n        const gl = Object.values(globalRegistry.renderers)[0].gl;\n        const program = Object.values(globalRegistry.renderers)[0].programInfo.program;\n        this.vertexBuffer = gl.createBuffer();\n        this.normalBuffer = gl.createBuffer();\n        this.textureCoordBuffer = gl.createBuffer();\n        this.indexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);\n        const posAttribLoc = gl.getAttribLocation(program, 'pos');\n        gl.vertexAttribPointer(posAttribLoc, 3, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n        gl.enableVertexAttribArray(posAttribLoc);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.normals, gl.STATIC_DRAW);\n        const normalAttribLoc = gl.getAttribLocation(program, 'normal');\n        gl.vertexAttribPointer(normalAttribLoc, 3, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n        gl.enableVertexAttribArray(normalAttribLoc);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.texturecoords, gl.STATIC_DRAW);\n        const texCoordAttribLoc = gl.getAttribLocation(program, 'texCoord');\n        gl.vertexAttribPointer(texCoordAttribLoc, 2, gl.FLOAT, false, 2 * Float32Array.BYTES_PER_ELEMENT, 0);\n        gl.enableVertexAttribArray(texCoordAttribLoc);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n    }\n}\n","import { PerspectiveCamera } from './cameras/PerspectiveCamera';\nimport { Mesh } from './core/Mesh';\nimport { Renderer } from './core/Renderer';\nimport { Scene } from './core/Scene';\nimport { Geometry } from './geometries/Geometry';\nimport { JSONLoader } from './loaders/JSONLoader';\nimport { Loader } from './loaders/Loader';\nimport { ModelLoader } from './loaders/ModelLoader';\nimport { TextLoader } from './loaders/TextLoader';\nimport { TextureCubeLoader } from './loaders/TextureCubeLoader';\nimport { TextureLoader } from './loaders/TextureLoader';\nimport { Material } from './materials/Material';\nimport { Matrix4 } from './math/Matrix4';\nimport { Vector2 } from './math/Vector2';\nimport { Vector3 } from './math/Vector3';\nimport { Vector4 } from './math/Vector4';\nimport { Model } from './models/Model';\nexport { Scene, PerspectiveCamera, Renderer, Loader, ModelLoader, TextLoader, TextureLoader, TextureCubeLoader, JSONLoader, Model, Geometry, Material, Mesh, Matrix4, Vector2, Vector3, Vector4 };\n/**\n * A global registry which keeps track of all the objects in the scene.\n *\n * @type {{\n *     scenes: { [key: string]: Scene },\n *     cameras: { [key: string]: PerspectiveCamera },\n *     renderers: { [key: string]: Renderer },\n *     loaders: { [key: string]: Loader },\n *     geometries: { [key: string]: Geometry },\n *     materials: { [key: string]: Material },\n *     meshes: { [key: string]: Mesh },\n *     models: { [key: string]: Model }\n * \\}\\}\n */\nexport const globalRegistry = {\n    scenes: {},\n    cameras: {},\n    renderers: {},\n    loaders: {},\n    geometries: {},\n    materials: {},\n    meshes: {},\n    models: {},\n};\n/**\n * The source code for the vertex shader.\n *\n * @type {string}\n */\nexport const vertexShaderSource = await new Loader().loadText('../src/shaders/vertexShader.glsl');\n/**\n * The source code for the fragment shader.\n *\n * @type {string}\n */\nexport const fragmentShaderSource = await new Loader().loadText('../src/shaders/fragmentShader.glsl');\n","/**\n * The JSONLoader class is a utility class for loading json files from a given URL.\n *\n * @export\n * @class JSONLoader\n * @typedef {JSONLoader}\n */\nexport class JSONLoader {\n    /**\n     * Loads a json file from a given URL.\n     *\n     * @public\n     * @async\n     * @param {string} url The URL of the file to be loaded.\n     * @returns {Promise<string>} A promise containing the contents of the file.\n     */\n    async load(url) {\n        const response = await fetch(url);\n        const json = await response.json();\n        return json;\n    }\n}\n","import { globalRegistry } from '../index';\nimport { getPropertyValue } from '../utils/getPropertyValue';\n/**\n * A class which provides functionality for loading assets.\n *\n * @export\n * @class Loader\n * @typedef {Loader}\n */\nexport class Loader {\n    /**\n     * Loads a text file from a given URL.\n     *\n     * @public\n     * @async\n     * @param {string} url The URL of the file to be loaded.\n     * @returns {Promise<string>} A promise containing the contents of the file.\n     */\n    async loadText(url) {\n        const response = await fetch(url);\n        const text = await response.text();\n        return text;\n    }\n    /**\n     * Loads a 3D model from a given URL.\n     *\n     * @public\n     * @async\n     * @param {string} url The URL of the file to be loaded.\n     * @returns {Promise<AssimpModelJSON>} A promise containing the loaded model.\n     */\n    async loadModel(url) {\n        const response = await fetch(url);\n        const model = await response.json();\n        const materials = [];\n        for (let i = 0; i < model.materials.length; i++) {\n            const material = model.materials[i];\n            materials[i] = {\n                ambientColor: getPropertyValue(material, '$clr.ambient', [1, 1, 1]),\n                ambientIntensity: 1,\n                ambientMap: getPropertyValue(material, '$raw.AmbientColor|file', null),\n                diffuseColor: getPropertyValue(material, '$clr.diffuse', [1, 1, 1]),\n                diffuseIntensity: 1,\n                diffuseMap: getPropertyValue(material, '$raw.DiffuseColor|file', null),\n                specularColor: getPropertyValue(material, '$clr.specular', [1, 1, 1]),\n                specularIntensity: 1,\n                specularMap: getPropertyValue(material, '$raw.SpecularColor|file', null),\n                emissiveColor: getPropertyValue(material, '$clr.emissive', [1, 1, 1]),\n                emissiveIntensity: 1,\n                emissiveMap: getPropertyValue(material, '$raw.EmissiveColor|file', null),\n                shininess: getPropertyValue(material, '$mat.shininess', 20),\n                opacity: getPropertyValue(material, '$mat.opacity', 1),\n                normalMap: getPropertyValue(material, '$raw.NormalMap|file', null),\n                roughnessMap: getPropertyValue(material, '$raw.ShininessExponent|file', null),\n                environmentMap: null,\n            };\n        }\n        model.materials = materials;\n        return model;\n    }\n    /**\n     * Loads a json file from a given URL.\n     *\n     * @public\n     * @async\n     * @param {string} url The URL of the file to be loaded.\n     * @returns {Promise<string>} A promise containing the contents of the file.\n     */\n    async loadJSON(url) {\n        const response = await fetch(url);\n        const json = await response.json();\n        return json;\n    }\n    /**\n     * Loads a 2D texture from a given URL.\n     *\n     * @public\n     * @param {string} url The URL of the texture to be loaded.\n     * @param {?() => void} [onload] A callback which is called when the texture is loaded.\n     * @returns {WebGLTexture} The loaded texture.\n     */\n    loadTexture(url, onload) {\n        const gl = Object.values(globalRegistry.renderers)[0].gl;\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        const image = new Image();\n        image.src = url;\n        image.onload = () => {\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            if (onload)\n                onload();\n        };\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        return texture;\n    }\n    /**\n     * Loads a cube map texture from a given URL.\n     *\n     * @public\n     * @param {string} url The URL of the texture to be loaded.\n     * @param {?() => void} [onload] A callback which is called when the texture is loaded.\n     * @returns {WebGLTexture} The loaded texture.\n     */\n    loadTextureCube(url, onload) {\n        const gl = Object.values(globalRegistry.renderers)[0].gl;\n        const faces = [\n            { target: gl.TEXTURE_CUBE_MAP_POSITIVE_X, url: `${url}/posx.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X, url: `${url}/negx.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y, url: `${url}/posy.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, url: `${url}/negy.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z, url: `${url}/posz.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, url: `${url}/negz.jpg` },\n        ];\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n        faces.forEach((face) => {\n            const { target, url } = face;\n            const image = new Image();\n            image.src = url;\n            image.onload = () => {\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n                gl.texImage2D(target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n                if (onload)\n                    onload();\n            };\n        });\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, 32882, gl.CLAMP_TO_EDGE);\n        return texture;\n    }\n}\n","import { getPropertyValue } from '../utils/getPropertyValue';\n/**\n * The ModelLoader class is a utility class for loading 3D models from a given URL.\n *\n * @export\n * @class ModelLoader\n * @typedef {ModelLoader}\n */\nexport class ModelLoader {\n    /**\n     * Loads a 3D model from a given URL.\n     *\n     * @public\n     * @async\n     * @param {string} url The URL of the file to be loaded.\n     * @returns {AssimpModelJSON} A promise containing the loaded model.\n     */\n    async load(url) {\n        const response = await fetch(url);\n        const model = await response.json();\n        const materials = [];\n        for (let i = 0; i < model.materials.length; i++) {\n            const material = model.materials[i];\n            materials[i] = {\n                ambientColor: getPropertyValue(material, '$clr.ambient', [1, 1, 1]),\n                ambientIntensity: 1,\n                ambientMap: getPropertyValue(material, '$raw.AmbientColor|file', null),\n                diffuseColor: getPropertyValue(material, '$clr.diffuse', [1, 1, 1]),\n                diffuseIntensity: 1,\n                diffuseMap: getPropertyValue(material, '$raw.DiffuseColor|file', null),\n                specularColor: getPropertyValue(material, '$clr.specular', [1, 1, 1]),\n                specularIntensity: 1,\n                specularMap: getPropertyValue(material, '$raw.SpecularColor|file', null),\n                emissiveColor: getPropertyValue(material, '$clr.emissive', [1, 1, 1]),\n                emissiveIntensity: 1,\n                emissiveMap: getPropertyValue(material, '$raw.EmissiveColor|file', null),\n                shininess: getPropertyValue(material, '$mat.shininess', 20),\n                opacity: getPropertyValue(material, '$mat.opacity', 1),\n                normalMap: getPropertyValue(material, '$raw.NormalMap|file', null),\n                roughnessMap: getPropertyValue(material, '$raw.ShininessExponent|file', null),\n                environmentMap: null,\n            };\n        }\n        model.materials = materials;\n        return model;\n    }\n}\n","/**\n * The TextLoader class is a utility class for loading text files from a given URL.\n *\n * @export\n * @class TextLoader\n * @typedef {TextLoader}\n */\nexport class TextLoader {\n    /**\n     * Loads a text file from a given URL.\n     *\n     * @public\n     * @async\n     * @param {string} url The URL of the file to be loaded.\n     * @returns {Promise<string>} A promise containing the contents of the file.\n     */\n    async load(url) {\n        const response = await fetch(url);\n        const text = await response.text();\n        return text;\n    }\n}\n","import { globalRegistry } from '../index';\n/**\n * The TextureCubeLoader class is a utility class for loading cube map textures from a given URL.\n *\n * @export\n * @class TextureCubeLoader\n * @typedef {TextureCubeLoader}\n */\nexport class TextureCubeLoader {\n    /**\n     * Loads a cube map texture from a given URL.\n     *\n     * @public\n     * @param {string} url The URL of the texture to be loaded.\n     * @param {?() => void} [onload] A callback which is called when the texture is loaded.\n     * @returns {WebGLTexture} The loaded texture.\n     */\n    load(url, onload) {\n        const gl = Object.values(globalRegistry.renderers)[0].gl;\n        const faces = [\n            { target: gl.TEXTURE_CUBE_MAP_POSITIVE_X, url: `${url}/posx.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X, url: `${url}/negx.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y, url: `${url}/posy.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, url: `${url}/negy.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z, url: `${url}/posz.jpg` },\n            { target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, url: `${url}/negz.jpg` },\n        ];\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n        faces.forEach((face) => {\n            const { target, url } = face;\n            const image = new Image();\n            image.src = url;\n            image.onload = () => {\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n                gl.texImage2D(target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n                if (onload)\n                    onload();\n            };\n        });\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, 32882, gl.CLAMP_TO_EDGE);\n        return texture;\n    }\n}\n","import { globalRegistry } from '../index';\n/**\n * TextureLoader is a class that loads and creates a WebGLTexture from a given URL.\n *\n * @export\n * @class TextureLoader\n * @typedef {TextureLoader}\n */\nexport class TextureLoader {\n    /**\n     * Loads a texture from a given URL and creates a WebGLTexture.\n     *\n     * @public\n     * @param {string} url The URL of the texture to be loaded.\n     * @param {?() => void} [onload] A callback which is called when the texture is loaded.\n     * @returns {WebGLTexture} The loaded texture.\n     */\n    load(url, onload) {\n        const gl = Object.values(globalRegistry.renderers)[0].gl;\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        const image = new Image();\n        image.src = url;\n        image.onload = () => {\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            if (onload)\n                onload();\n        };\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        return texture;\n    }\n    /**\n     * Creates a white 1x1 texture.\n     *\n     * @public\n     * @returns {WebGLTexture} The white 1x1 texture.\n     */\n    null() {\n        const gl = Object.values(globalRegistry.renderers)[0].gl;\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        const whitePixel = new Uint8Array([255, 255, 255, 255]);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, whitePixel);\n        return texture;\n    }\n}\n","import { Loader } from '../loaders/Loader';\nimport { TextureLoader } from '../loaders/TextureLoader';\n/**\n * A material is a collection of properties that can be used to define the appearance of a mesh.\n * Properties include ambient color, diffuse color, specular color, emissive color, shininess, opacity,\n * and texture coordinates.\n *\n * @export\n * @class Material\n * @typedef {Material}\n */\nexport class Material {\n    parameters1;\n    parameters2;\n    /**\n     * The ambient color of the material.\n     *\n     * @public\n     * @type {number[]}\n     */\n    ambientColor;\n    /**\n     * The ambient intensity of the material.\n     *\n     * @public\n     * @type {number}\n     */\n    ambientIntensity;\n    /**\n     * The ambient texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    ambientMap;\n    /**\n     * The diffuse color of the material.\n     *\n     * @public\n     * @type {number[]}\n     */\n    diffuseColor;\n    /**\n     * The diffuse intensity of the material.\n     *\n     * @public\n     * @type {number}\n     */\n    diffuseIntensity;\n    /**\n     * The diffuse texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    diffuseMap;\n    /**\n     * The specular color of the material.\n     *\n     * @public\n     * @type {number[]}\n     */\n    specularColor;\n    /**\n     * The specular intensity of the material.\n     *\n     * @public\n     * @type {number}\n     */\n    specularIntensity;\n    /**\n     * The specular texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    specularMap;\n    /**\n     * The emissive color of the material.\n     *\n     * @public\n     * @type {number[]}\n     */\n    emissiveColor;\n    /**\n     * The emissive intensity of the material.\n     *\n     * @public\n     * @type {number}\n     */\n    emissiveIntensity;\n    /**\n     * The emissive texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    emissiveMap;\n    /**\n     * The shininess of the material.\n     *\n     * @public\n     * @type {number}\n     */\n    shininess;\n    /**\n     * The opacity of the material.\n     *\n     * @public\n     * @type {number}\n     */\n    opacity;\n    /**\n     * The normal texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    normalMap;\n    /**\n     * The roughness texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    roughnessMap;\n    /**\n     * The environment texture of the material.\n     *\n     * @public\n     * @type {(WebGLTexture | null)}\n     */\n    environmentMap;\n    /**\n     * Creates an instance of Material.\n     *\n     * @constructor\n     * @param {MaterialJSON} [parameters1={}]\n     * @param {MaterialJSON\\} [parameters2={\\}]\n     */\n    constructor(parameters1 = {}, parameters2 = {}) {\n        this.parameters1 = parameters1;\n        this.parameters2 = parameters2;\n        this.ambientColor = this.removeAlpha(parameters1.ambientColor ?? [1, 1, 1]);\n        this.ambientIntensity = parameters1.ambientIntensity ?? 1;\n        this.ambientMap = typeof parameters1.ambientMap === 'string' ? new Loader().loadTexture(parameters1.ambientMap) : parameters1.ambientMap ?? new TextureLoader().null();\n        this.diffuseColor = this.removeAlpha(parameters1.diffuseColor ?? [1, 1, 1]);\n        this.diffuseIntensity = parameters1.diffuseIntensity ?? 1;\n        this.diffuseMap = typeof parameters1.diffuseMap === 'string' ? new Loader().loadTexture(parameters1.diffuseMap) : parameters1.diffuseMap ?? new TextureLoader().null();\n        this.specularColor = this.removeAlpha(parameters1.specularColor ?? [1, 1, 1]);\n        this.specularIntensity = parameters1.specularIntensity ?? 1;\n        this.specularMap = typeof parameters1.specularMap === 'string' ? new Loader().loadTexture(parameters1.specularMap) : parameters1.specularMap ?? new TextureLoader().null();\n        this.emissiveColor = this.removeAlpha(parameters1.emissiveColor ?? [1, 1, 1]);\n        this.emissiveIntensity = parameters1.emissiveIntensity ?? 1;\n        this.emissiveMap = typeof parameters1.emissiveMap === 'string' ? new Loader().loadTexture(parameters1.emissiveMap) : parameters1.emissiveMap ?? new TextureLoader().null();\n        this.shininess = parameters1.shininess ?? 20;\n        this.opacity = parameters1.opacity ?? 1;\n        this.normalMap = typeof parameters1.normalMap === 'string' ? new Loader().loadTexture(parameters1.normalMap) : parameters1.normalMap ?? null;\n        this.roughnessMap = typeof parameters1.roughnessMap === 'string' ? new Loader().loadTexture(parameters1.roughnessMap) : parameters1.roughnessMap ?? null;\n        this.environmentMap = typeof parameters1.environmentMap === 'string' ? new Loader().loadTextureCube(parameters1.environmentMap) : parameters1.environmentMap ?? null;\n        Object.assign(this, parameters2);\n    }\n    /**\n     * Removes the alpha channel from a color.\n     *\n     * @private\n     * @param {number[]} color The color to remove the alpha channel from.\n     * @returns {number[]} The color without the alpha channel.\n     */\n    removeAlpha(color) {\n        return color.length === 4 ? color.slice(0, 3) : color;\n    }\n}\n","import { EPSILON } from '../utils/constants';\n/**\n * ${1:Description placeholder}\n *\n * @export\n * @class Matrix4\n * @typedef {Matrix4}\n * @extends {Float32Array}\n */\nexport class Matrix4 extends Float32Array {\n    /**\n     * Creates an instance of Matrix4.\n     *\n     * @constructor\n     */\n    constructor() {\n        super(16);\n        this.identity();\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {this}\n     */\n    identity() {\n        this.fill(0);\n        this[0] = this[5] = this[10] = this[15] = 1;\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {Vector3} eye\n     * @param {Vector3} center\n     * @param {Vector3} up\n     * @returns {this}\n     */\n    lookAt(eye, center, up) {\n        let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n        const [eyex, eyey, eyez] = eye;\n        const [upx, upy, upz] = up;\n        const [centerx, centery, centerz] = center;\n        if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {\n            return this.identity();\n        }\n        z0 = eyex - centerx;\n        z1 = eyey - centery;\n        z2 = eyez - centerz;\n        len = 1 / Math.hypot(z0, z1, z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.hypot(x0, x1, x2);\n        if (len === 0) {\n            x0 = x1 = x2 = 0;\n        }\n        else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n        len = Math.hypot(y0, y1, y2);\n        if (len === 0) {\n            y0 = y1 = y2 = 0;\n        }\n        else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n        this.set([x0, y0, z0, 0, x1, y1, z1, 0, x2, y2, z2, 0, -(x0 * eyex + x1 * eyey + x2 * eyez), -(y0 * eyex + y1 * eyey + y2 * eyez), -(z0 * eyex + z1 * eyey + z2 * eyez), 1]);\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {number} rad\n     * @param {Vector3} axis\n     * @returns {this}\n     */\n    rotate(rad, axis) {\n        let [x, y, z] = axis;\n        let len = Math.hypot(x, y, z);\n        if (len < EPSILON)\n            return this;\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n        const s = Math.sin(rad);\n        const c = Math.cos(rad);\n        const t = 1 - c;\n        const a00 = this[0], a01 = this[1], a02 = this[2], a03 = this[3];\n        const a10 = this[4], a11 = this[5], a12 = this[6], a13 = this[7];\n        const a20 = this[8], a21 = this[9], a22 = this[10], a23 = this[11];\n        const b00 = x * x * t + c, b01 = y * x * t + z * s, b02 = z * x * t - y * s;\n        const b10 = x * y * t - z * s, b11 = y * y * t + c, b12 = z * y * t + x * s;\n        const b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;\n        this.set([\n            a00 * b00 + a10 * b01 + a20 * b02,\n            a01 * b00 + a11 * b01 + a21 * b02,\n            a02 * b00 + a12 * b01 + a22 * b02,\n            a03 * b00 + a13 * b01 + a23 * b02,\n            a00 * b10 + a10 * b11 + a20 * b12,\n            a01 * b10 + a11 * b11 + a21 * b12,\n            a02 * b10 + a12 * b11 + a22 * b12,\n            a03 * b10 + a13 * b11 + a23 * b12,\n            a00 * b20 + a10 * b21 + a20 * b22,\n            a01 * b20 + a11 * b21 + a21 * b22,\n            a02 * b20 + a12 * b21 + a22 * b22,\n            a03 * b20 + a13 * b21 + a23 * b22,\n            this[12],\n            this[13],\n            this[14],\n            this[15],\n        ]);\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {Matrix4} other\n     * @returns {this}\n     */\n    multiply(other) {\n        const a = this;\n        const b = other;\n        const result = new Float32Array(16);\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                result[i * 4 + j] = a[i * 4 + 0] * b[0 * 4 + j] + a[i * 4 + 1] * b[1 * 4 + j] + a[i * 4 + 2] * b[2 * 4 + j] + a[i * 4 + 3] * b[3 * 4 + j];\n            }\n        }\n        this.set(result);\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {number} rad\n     * @returns {this}\n     */\n    rotateX(rad) {\n        const s = Math.sin(rad);\n        const c = Math.cos(rad);\n        const a10 = this[4], a11 = this[5], a12 = this[6], a13 = this[7];\n        const a20 = this[8], a21 = this[9], a22 = this[10], a23 = this[11];\n        this[4] = a10 * c + a20 * s;\n        this[5] = a11 * c + a21 * s;\n        this[6] = a12 * c + a22 * s;\n        this[7] = a13 * c + a23 * s;\n        this[8] = a20 * c - a10 * s;\n        this[9] = a21 * c - a11 * s;\n        this[10] = a22 * c - a12 * s;\n        this[11] = a23 * c - a13 * s;\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {number} rad\n     * @returns {this}\n     */\n    rotateY(rad) {\n        const s = Math.sin(rad);\n        const c = Math.cos(rad);\n        const a00 = this[0], a01 = this[1], a02 = this[2], a03 = this[3];\n        const a20 = this[8], a21 = this[9], a22 = this[10], a23 = this[11];\n        this[0] = a00 * c - a20 * s;\n        this[1] = a01 * c - a21 * s;\n        this[2] = a02 * c - a22 * s;\n        this[3] = a03 * c - a23 * s;\n        this[8] = a00 * s + a20 * c;\n        this[9] = a01 * s + a21 * c;\n        this[10] = a02 * s + a22 * c;\n        this[11] = a03 * s + a23 * c;\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {number} rad\n     * @returns {this}\n     */\n    rotateZ(rad) {\n        const s = Math.sin(rad);\n        const c = Math.cos(rad);\n        const a00 = this[0], a01 = this[1], a02 = this[2], a03 = this[3];\n        const a10 = this[4], a11 = this[5], a12 = this[6], a13 = this[7];\n        this[0] = a00 * c + a10 * s;\n        this[1] = a01 * c + a11 * s;\n        this[2] = a02 * c + a12 * s;\n        this[3] = a03 * c + a13 * s;\n        this[4] = a10 * c - a00 * s;\n        this[5] = a11 * c - a01 * s;\n        this[6] = a12 * c - a02 * s;\n        this[7] = a13 * c - a03 * s;\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {Vector3} v\n     * @returns {this}\n     */\n    scale(v) {\n        const [x, y, z] = v;\n        this[0] *= x;\n        this[1] *= x;\n        this[2] *= x;\n        this[3] *= x;\n        this[4] *= y;\n        this[5] *= y;\n        this[6] *= y;\n        this[7] *= y;\n        this[8] *= z;\n        this[9] *= z;\n        this[10] *= z;\n        this[11] *= z;\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {Vector3} v\n     * @returns {this}\n     */\n    translate(v) {\n        const [x, y, z] = v;\n        this[12] = this[0] * x + this[4] * y + this[8] * z + this[12];\n        this[13] = this[1] * x + this[5] * y + this[9] * z + this[13];\n        this[14] = this[2] * x + this[6] * y + this[10] * z + this[14];\n        this[15] = this[3] * x + this[7] * y + this[11] * z + this[15];\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {(this | null)}\n     */\n    invert() {\n        const m = this;\n        const inv = new Float32Array(16);\n        inv[0] = m[5] * m[10] * m[15] - m[5] * m[11] * m[14] - m[9] * m[6] * m[15] + m[9] * m[7] * m[14] + m[13] * m[6] * m[11] - m[13] * m[7] * m[10];\n        inv[4] = -m[4] * m[10] * m[15] + m[4] * m[11] * m[14] + m[8] * m[6] * m[15] - m[8] * m[7] * m[14] - m[12] * m[6] * m[11] + m[12] * m[7] * m[10];\n        inv[8] = m[4] * m[9] * m[15] - m[4] * m[11] * m[13] - m[8] * m[5] * m[15] + m[8] * m[7] * m[13] + m[12] * m[5] * m[11] - m[12] * m[7] * m[9];\n        inv[12] = -m[4] * m[9] * m[14] + m[4] * m[10] * m[13] + m[8] * m[5] * m[14] - m[8] * m[6] * m[13] - m[12] * m[5] * m[10] + m[12] * m[6] * m[9];\n        inv[1] = -m[1] * m[10] * m[15] + m[1] * m[11] * m[14] + m[9] * m[2] * m[15] - m[9] * m[3] * m[14] - m[13] * m[2] * m[11] + m[13] * m[3] * m[10];\n        inv[5] = m[0] * m[10] * m[15] - m[0] * m[11] * m[14] - m[8] * m[2] * m[15] + m[8] * m[3] * m[14] + m[12] * m[2] * m[11] - m[12] * m[3] * m[10];\n        inv[9] = -m[0] * m[9] * m[15] + m[0] * m[11] * m[13] + m[8] * m[1] * m[15] - m[8] * m[3] * m[13] - m[12] * m[1] * m[11] + m[12] * m[3] * m[9];\n        inv[13] = m[0] * m[9] * m[14] - m[0] * m[10] * m[13] - m[8] * m[1] * m[14] + m[8] * m[2] * m[13] + m[12] * m[1] * m[10] - m[12] * m[2] * m[9];\n        inv[2] = m[1] * m[6] * m[15] - m[1] * m[7] * m[14] - m[5] * m[2] * m[15] + m[5] * m[3] * m[14] + m[13] * m[2] * m[7] - m[13] * m[3] * m[6];\n        inv[6] = -m[0] * m[6] * m[15] + m[0] * m[7] * m[14] + m[4] * m[2] * m[15] - m[4] * m[3] * m[14] - m[12] * m[2] * m[7] + m[12] * m[3] * m[6];\n        inv[10] = m[0] * m[5] * m[15] - m[0] * m[7] * m[13] - m[4] * m[1] * m[15] + m[4] * m[3] * m[13] + m[12] * m[1] * m[7] - m[12] * m[3] * m[5];\n        inv[14] = -m[0] * m[5] * m[14] + m[0] * m[6] * m[13] + m[4] * m[1] * m[14] - m[4] * m[2] * m[13] - m[12] * m[1] * m[6] + m[12] * m[2] * m[5];\n        inv[3] = -m[1] * m[6] * m[11] + m[1] * m[7] * m[10] + m[5] * m[2] * m[11] - m[5] * m[3] * m[10] - m[9] * m[2] * m[7] + m[9] * m[3] * m[6];\n        inv[7] = m[0] * m[6] * m[11] - m[0] * m[7] * m[10] - m[4] * m[2] * m[11] + m[4] * m[3] * m[10] + m[8] * m[2] * m[7] - m[8] * m[3] * m[6];\n        inv[11] = -m[0] * m[5] * m[11] + m[0] * m[7] * m[9] + m[4] * m[1] * m[11] - m[4] * m[3] * m[9] - m[8] * m[1] * m[7] + m[8] * m[3] * m[5];\n        inv[15] = m[0] * m[5] * m[10] - m[0] * m[6] * m[9] - m[4] * m[1] * m[10] + m[4] * m[2] * m[9] + m[8] * m[1] * m[6] - m[8] * m[2] * m[5];\n        let det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];\n        if (det === 0)\n            return null;\n        det = 1.0 / det;\n        for (let i = 0; i < 16; i++) {\n            this[i] = inv[i] * det;\n        }\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {this}\n     */\n    transpose() {\n        const m = this;\n        let temp;\n        temp = m[1];\n        m[1] = m[4];\n        m[4] = temp;\n        temp = m[2];\n        m[2] = m[8];\n        m[8] = temp;\n        temp = m[6];\n        m[6] = m[9];\n        m[9] = temp;\n        temp = m[3];\n        m[3] = m[12];\n        m[12] = temp;\n        temp = m[7];\n        m[7] = m[13];\n        m[13] = temp;\n        temp = m[11];\n        m[11] = m[14];\n        m[14] = temp;\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {number}\n     */\n    determinant() {\n        const m = this;\n        const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n        const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n        const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n        const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n        return (m00 * (m11 * (m22 * m33 - m23 * m32) - m12 * (m21 * m33 - m23 * m31) + m13 * (m21 * m32 - m22 * m31)) -\n            m01 * (m10 * (m22 * m33 - m23 * m32) - m12 * (m20 * m33 - m23 * m30) + m13 * (m20 * m32 - m22 * m30)) +\n            m02 * (m10 * (m21 * m33 - m23 * m31) - m11 * (m20 * m33 - m23 * m30) + m13 * (m20 * m31 - m21 * m30)) -\n            m03 * (m10 * (m21 * m32 - m22 * m31) - m11 * (m20 * m32 - m22 * m30) + m12 * (m20 * m31 - m21 * m30)));\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {Matrix4}\n     */\n    copy() {\n        const copy = new Matrix4();\n        copy.set(this);\n        return copy;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {string}\n     */\n    toString() {\n        return `\n            [${this[0]}, ${this[4]}, ${this[8]}, ${this[12]}]\n            [${this[1]}, ${this[5]}, ${this[9]}, ${this[13]}]\n            [${this[2]}, ${this[6]}, ${this[10]}, ${this[14]}]\n            [${this[3]}, ${this[7]}, ${this[11]}, ${this[15]}]\n        `;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @param {number[]} array\n     * @returns {this}\n     */\n    fromArray(array) {\n        this.set(array);\n        return this;\n    }\n    /**\n     * ${1:Description placeholder}\n     *\n     * @public\n     * @returns {number[]}\n     */\n    toArray() {\n        return Array.from(this);\n    }\n}\n","/**\n * 2D vector class.\n *\n * @export\n * @class Vector2\n * @typedef {Vector2}\n * @extends {Float32Array}\n */\nexport class Vector2 extends Float32Array {\n    /**\n     * Creates an instance of Vector2.\n     *\n     * @constructor\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     */\n    constructor(x = 0, y = 0) {\n        super(2);\n        this[0] = x;\n        this[1] = y;\n    }\n    /**\n     * Gets the magnitude of the vector.\n     *\n     * @public\n     * @returns {number}\n     */\n    magnitude() {\n        return Math.sqrt(this[0] ** 2 + this[1] ** 2);\n    }\n    /**\n     * Normalizes the vector.\n     *\n     * @public\n     * @returns {this}\n     */\n    normalize() {\n        const mag = this.magnitude();\n        if (mag > 0) {\n            this[0] /= mag;\n            this[1] /= mag;\n        }\n        return this;\n    }\n    /**\n     * Adds another vector to this vector.\n     *\n     * @public\n     * @param {Vector2} other\n     * @returns {this}\n     */\n    add(other) {\n        this[0] += other[0];\n        this[1] += other[1];\n        return this;\n    }\n    /**\n     * Subtracts another vector from this vector.\n     *\n     * @public\n     * @param {Vector2} other\n     * @returns {this}\n     */\n    subtract(other) {\n        this[0] -= other[0];\n        this[1] -= other[1];\n        return this;\n    }\n    /**\n     * Scales this vector by a scalar value.\n     *\n     * @public\n     * @param {number} scalar\n     * @returns {this}\n     */\n    scale(scalar) {\n        this[0] *= scalar;\n        this[1] *= scalar;\n        return this;\n    }\n    /**\n     * Calculates the dot product of this vector and another vector.\n     *\n     * @public\n     * @param {Vector2} other\n     * @returns {number}\n     */\n    dot(other) {\n        return this[0] * other[0] + this[1] * other[1];\n    }\n    /**\n     * Divides this vector by a scalar value.\n     *\n     * @public\n     * @param {number} scalar\n     * @returns {this}\n     */\n    divide(scalar) {\n        if (scalar !== 0) {\n            this[0] /= scalar;\n            this[1] /= scalar;\n        }\n        else {\n            throw new Error('Cannot divide by zero');\n        }\n        return this;\n    }\n}\nVector2.prototype.set = function (x, y) {\n    this[0] = x;\n    this[1] = y ?? this[1];\n};\n","/**\n * 3D vector class.\n *\n * @export\n * @class Vector3\n * @typedef {Vector3}\n * @extends {Float32Array}\n */\nexport class Vector3 extends Float32Array {\n    /**\n     * Creates an instance of Vector3.\n     *\n     * @constructor\n     * @param {number} [x=0] - The x-component of the vector.\n     * @param {number} [y=0] - The y-component of the vector.\n     * @param {number} [z=0] - The z-component of the vector.\n     */\n    constructor(x = 0, y = 0, z = 0) {\n        super(3);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n    }\n    /**\n     * Calculates the magnitude of the vector.\n     *\n     * @public\n     * @returns {number} - The magnitude of the vector.\n     */\n    magnitude() {\n        return Math.sqrt(this[0] ** 2 + this[1] ** 2 + this[2] ** 2);\n    }\n    /**\n     * Normalizes the vector.\n     *\n     * @public\n     * @returns {this} - The normalized vector.\n     */\n    normalize() {\n        const mag = this.magnitude();\n        if (mag > 0) {\n            this[0] /= mag;\n            this[1] /= mag;\n            this[2] /= mag;\n        }\n        return this;\n    }\n    /**\n     * Adds a vector to this vector.\n     *\n     * @public\n     * @param {Vector3} other - The vector to add.\n     * @returns {this} - The resulting vector.\n     */\n    add(other) {\n        this[0] += other[0];\n        this[1] += other[1];\n        this[2] += other[2];\n        return this;\n    }\n    /**\n     * Subtracts a vector from this vector.\n     *\n     * @public\n     * @param {Vector3} other - The vector to subtract.\n     * @returns {this} - The resulting vector.\n     */\n    subtract(other) {\n        this[0] -= other[0];\n        this[1] -= other[1];\n        this[2] -= other[2];\n        return this;\n    }\n    /**\n     * Scales the vector by a scalar value.\n     *\n     * @public\n     * @param {number} scalar - The scalar to scale by.\n     * @returns {this} - The scaled vector.\n     */\n    scale(scalar) {\n        this[0] *= scalar;\n        this[1] *= scalar;\n        this[2] *= scalar;\n        return this;\n    }\n    /**\n     * Calculates the dot product of this vector and another vector.\n     *\n     * @public\n     * @param {Vector3} other - The vector to dot with.\n     * @returns {number} - The dot product of the two vectors.\n     */\n    dot(other) {\n        return this[0] * other[0] + this[1] * other[1] + this[2] * other[2];\n    }\n    /**\n     * Calculates the cross product of this vector and another vector.\n     *\n     * @public\n     * @param {Vector3} other - The vector to cross with.\n     * @returns {Vector3} - The cross product of the two vectors.\n     */\n    cross(other) {\n        const x = this[1] * other[2] - this[2] * other[1];\n        const y = this[2] * other[0] - this[0] * other[2];\n        const z = this[0] * other[1] - this[1] * other[0];\n        return new Vector3(x, y, z);\n    }\n    /**\n     * Divides the vector by a scalar value.\n     *\n     * @public\n     * @param {number} scalar - The scalar to divide by.\n     * @returns {this} - The divided vector.\n     */\n    divide(scalar) {\n        if (scalar !== 0) {\n            this[0] /= scalar;\n            this[1] /= scalar;\n            this[2] /= scalar;\n        }\n        else {\n            throw new Error('Cannot divide by zero');\n        }\n        return this;\n    }\n}\nVector3.prototype.set = function (x, y, z) {\n    this[0] = x;\n    this[1] = y ?? this[1];\n    this[2] = z ?? this[2];\n};\n","/**\n * A 4D vector class.\n *\n * @export\n * @class Vector4\n * @typedef {Vector4}\n * @extends {Float32Array}\n */\nexport class Vector4 extends Float32Array {\n    /**\n     * Creates an instance of Vector4.\n     *\n     * @constructor\n     * @param {number} [x=0] The x-component of the vector.\n     * @param {number} [y=0] The y-component of the vector.\n     * @param {number} [z=0] The z-component of the vector.\n     * @param {number} [w=0] The w-component of the vector.\n     */\n    constructor(x = 0, y = 0, z = 0, w = 0) {\n        super(4);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this[3] = w;\n    }\n    /**\n     * Calculates the magnitude of the vector.\n     *\n     * @public\n     * @returns {number} The magnitude of the vector.\n     */\n    magnitude() {\n        return Math.sqrt(this[0] ** 2 + this[1] ** 2 + this[2] ** 2 + this[3] ** 2);\n    }\n    /**\n     * Normalizes the vector.\n     *\n     * @public\n     * @returns {this} The normalized vector.\n     */\n    normalize() {\n        const mag = this.magnitude();\n        if (mag > 0) {\n            this[0] /= mag;\n            this[1] /= mag;\n            this[2] /= mag;\n            this[3] /= mag;\n        }\n        return this;\n    }\n    /**\n     * Adds another vector to this vector.\n     *\n     * @public\n     * @param {Vector4} other The vector to add.\n     * @returns {this} The resulting vector.\n     */\n    add(other) {\n        this[0] += other[0];\n        this[1] += other[1];\n        this[2] += other[2];\n        this[3] += other[3];\n        return this;\n    }\n    /**\n     * Subtracts another vector from this vector.\n     *\n     * @public\n     * @param {Vector4} other The vector to subtract.\n     * @returns {this} The resulting vector.\n     */\n    subtract(other) {\n        this[0] -= other[0];\n        this[1] -= other[1];\n        this[2] -= other[2];\n        this[3] -= other[3];\n        return this;\n    }\n    /**\n     * Scales the vector by a scalar value.\n     *\n     * @public\n     * @param {number} scalar The scalar to scale by.\n     * @returns {this} The scaled vector.\n     */\n    scale(scalar) {\n        this[0] *= scalar;\n        this[1] *= scalar;\n        this[2] *= scalar;\n        this[3] *= scalar;\n        return this;\n    }\n    /**\n     * Calculates the dot product of this vector and another vector.\n     *\n     * @public\n     * @param {Vector4} other The vector to dot with.\n     * @returns {number} The dot product of the two vectors.\n     */\n    dot(other) {\n        return this[0] * other[0] + this[1] * other[1] + this[2] * other[2] + this[3] * other[3];\n    }\n    /**\n     * Divides the vector by a scalar value.\n     *\n     * @public\n     * @param {number} scalar The scalar to divide by.\n     * @returns {this} The divided vector.\n     */\n    divide(scalar) {\n        if (scalar !== 0) {\n            this[0] /= scalar;\n            this[1] /= scalar;\n            this[2] /= scalar;\n            this[3] /= scalar;\n        }\n        else {\n            throw new Error('Cannot divide by zero');\n        }\n        return this;\n    }\n}\nVector4.prototype.set = function (x, y, z, w) {\n    this[0] = x;\n    this[1] = y ?? this[1];\n    this[2] = z ?? this[2];\n    this[3] = w ?? this[3];\n};\n","/**\n * A class representing a 3D model.\n *\n * @export\n * @class Model\n * @typedef {Model}\n */\nexport class Model {\n    data;\n    parameters;\n    /**\n     * Creates an instance of Model.\n     *\n     * @constructor\n     * @param {ModelJSON} data The JSON representation of the model.\n     * @param {MaterialJSON} [parameters={}] The material properties which should be applied to the model.\n     */\n    constructor(data, parameters = {}) {\n        this.data = data;\n        this.parameters = parameters;\n        this.data = data;\n        for (let i = 0; i < this.data.materials.length; i++) {\n            this.data.materials[i] = { ...this.data.materials[i], ...parameters };\n        }\n    }\n}\n","/**\n * A small value used to determine whether a floating point number is close to zero.\n *\n * @type {number} A small value, 0.000001.\n */\nexport const EPSILON = 0.000001;\n","/**\n * Compiles a shader from a given source and type.\n *\n * @export\n * @param {GLRenderingContext} gl The WebGL rendering context.\n * @param {string} shaderSource The source code of the shader to be compiled.\n * @param {number} type The type of the shader. Can be either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER.\n * @returns {(WebGLShader | null)} The compiled shader or null if the compilation failed.\n */\nexport function createCompileShader(gl, shaderSource, type) {\n    const shader = gl.createShader(type);\n    if (!shader) {\n        console.error('Error creating shader');\n        return null;\n    }\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const infoLog = gl.getShaderInfoLog(shader);\n        console.error('Shader compilation failed: ' + infoLog);\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\n","import { createCompileShader } from './createCompileShader';\n/**\n * Creates a WebGL program from a given vertex and fragment shader source.\n *\n * @export\n * @param {GLRenderingContext} gl The WebGL rendering context.\n * @param {string} vertexShaderSource The source code of the vertex shader.\n * @param {string} fragmentShaderSource The source code of the fragment shader.\n * @returns {WebGLProgram | null} The created WebGL program or null if the creation failed.\n */\nexport function createProgram(gl, vertexShaderSource, fragmentShaderSource) {\n    const vertexShader = createCompileShader(gl, vertexShaderSource, gl.VERTEX_SHADER);\n    const fragmentShader = createCompileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);\n    if (!vertexShader || !fragmentShader)\n        return null;\n    const program = gl.createProgram();\n    if (!program) {\n        console.error('Error creating WebGL program');\n        return null;\n    }\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        const infoLog = gl.getProgramInfoLog(program);\n        console.error('Program linking failed: ' + infoLog);\n        gl.deleteProgram(program);\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n        return null;\n    }\n    return program;\n}\n","/**\n * Retrieves a property value from a given material.\n *\n * @export\n * @param {AssimpMaterialJSON} material The material to retrieve the property from.\n * @param {string} key The key of the property to retrieve.\n * @param {(string | number | number[] | null)} [def=null] The default value to return if the property is not found.\n * @returns {(string | number | number[] | null)} The value of the property or the default value if not found.\n */\nexport function getPropertyValue(material, key, def = null) {\n    const keyProperty = material.properties.find((prop) => prop.key === key);\n    const value = keyProperty ? keyProperty.value : def;\n    return value;\n}\n","/**\n * Generates a random UUID (version 4).\n *\n * The generated UUID is a string of 32 hexadecimal digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12.\n * The first group is 8 hexadecimal digits, the second group is 4 hexadecimal digits, the third group is 4 hexadecimal digits, the fourth group is 4 hexadecimal digits, and the fifth group is 12 hexadecimal digits.\n * The generated UUID is a random UUID (version 4).\n *\n * @export\n * @returns {string} A random UUID (version 4).\n */\nexport function randomUUID() {\n    let timestamp = new Date().getTime();\n    let microseconds = typeof performance !== 'undefined' && performance.now ? performance.now() * 1000 : 0;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {\n        let randomValue = Math.random() * 16;\n        if (timestamp > 0) {\n            randomValue = (timestamp + randomValue) % 16 | 0;\n            timestamp = Math.floor(timestamp / 16);\n        }\n        else {\n            randomValue = (microseconds + randomValue) % 16 | 0;\n            microseconds = Math.floor(microseconds / 16);\n        }\n        return (char === 'x' ? randomValue : (randomValue & 0x3) | 0x8).toString(16);\n    });\n}\n","/**\n * Converts a given angle in degrees to radians.\n *\n * @export\n * @param {number} degrees The angle in degrees to convert.\n * @returns {number} The converted angle in radians.\n */\nexport function toRadian(degrees) {\n    return degrees * (Math.PI / 180);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}